import os
import sys
import json
import re
import asyncio
import traceback
import time
import uuid
from datetime import datetime, timezone, timedelta

import discord
from discord.ext import commands, tasks
from discord.ui import View, button

from flask import Flask
from threading import Thread

# -------------------- KEEP ALIVE (Flask) --------------------
app = Flask('')

@app.route('/')
def home():
    return "‚úÖ Bot operacional e conectado ao Discord"

def run():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run, daemon=True)
    t.start()

# -------------------- MULTI-INSTANCE GUARD --------------------
if os.environ.get("RUNNING_INSTANCE") == "1":
    print("‚ö†Ô∏è J√° existe uma inst√¢ncia ativa deste bot. Encerrando...")
    sys.exit()

os.environ["RUNNING_INSTANCE"] = "1"

# -------------------- SISTEMA DE TOKEN APRIMORADO --------------------
def get_discord_token():
    """Obt√©m o token com m√∫ltiplos fallbacks e valida√ß√£o"""
    # 1. Tentativa via vari√°veis de ambiente (com corre√ß√£o de nome)
    token = os.getenv("DISCORD_TOKEN") or os.getenv("DISGORD_TOKEN") or os.getenv("TOKEN")
    
    # 2. Fallback para secret files
    if not token:
        secret_paths = [
            "/etc/secrets/DISCORD_TOKEN",
            "/etc/secrets/discord_token",
            "/run/secrets/discord_token",
            "/var/run/secrets/discord_token",
            "./.env.discord"
        ]
        token = _read_secret_file(secret_paths)
    
    # Valida√ß√£o e limpeza
    if not token:
        raise RuntimeError(
            "‚ùå Token n√£o encontrado. Verifique: \n"
            "1. Vari√°veis de ambiente no Render (DISCORD_TOKEN)\n"
            "2. Secret Files (se configurado)\n"
            "3. Se o bot est√° ativado no Discord Developer Portal"
        )
    
    token = token.strip()
    if token.lower().startswith("bot "):
        token = token[4:].strip()
    
    # Debug seguro
    print(f"üîë Token carregado. Tamanho: {len(token)} caracteres")
    print(f"    Primeiros 4: {token[:4]}... √öltimos 4: ...{token[-4:]}")
    
    return token

def _read_secret_file(paths):
    """L√™ arquivos secretos com tratamento de erros"""
    for p in paths:
        try:
            if os.path.isfile(p):
                with open(p, "r") as f:
                    content = f.read().strip()
                    if content:
                        return content
        except Exception:
            continue
    return None

TOKEN = get_discord_token()

# -------------------- helper para ler ints da env --------------------
def _int_env(name, default):
    v = os.environ.get(name)
    if v is None:
        return default
    try:
        return int(v)
    except:
        try:
            return int(v.strip())
        except:
            return default

# -------------------- leitura de outros ids via env --------------------
GUILD_ID = _int_env("GUILD_ID", 1213316038805164093)
BOOSTER_ROLE_ID = _int_env("BOOSTER_ROLE_ID", 1248070897697427467)
CUSTOM_BOOSTER_ROLE_ID = _int_env("CUSTOM_BOOSTER_ROLE_ID", BOOSTER_ROLE_ID)

# -------------------- BOT SETUP --------------------
intents = discord.Intents.all()
bot = commands.Bot(command_prefix="!", intents=intents)

# [TODO O RESTO DO SEU C√ìDIGO PERMANECE EXATAMENTE IGUAL A PARTIR DAQUI]
# ID √∫nico para identificar a inst√¢ncia atual
INSTANCE_ID = str(uuid.uuid4())[:8]
print(f"üöÄ Inst√¢ncia iniciada com ID: {INSTANCE_ID}")

# ... [Todo o restante do seu c√≥digo permanece inalterado] ...

# --------------- Start / Tratamento de erros APRIMORADO ---------------
def start_bot():
    try:
        keep_alive()  # inicia keep-alive antes do bot
        
        @bot.event
        async def on_connect():
            print(f"üåê Conectado ao Discord (Lat√™ncia: {round(bot.latency*1000)}ms)")
            
        @bot.event
        async def on_disconnect():
            print("‚ö†Ô∏è Desconectado do Discord - Tentando reconectar...")
        
        print("üîÑ Iniciando bot...")
        bot.run(TOKEN)
        
    except discord.LoginFailure as e:
        print(f"‚ùå Falha no login: {e}")
        print("‚ÑπÔ∏è Solu√ß√µes poss√≠veis:")
        print("1. Verifique se o token est√° correto no Render")
        print("2. Gere um novo token no Discord Developer Portal")
        print("3. Verifique se o bot est√° ativado")
        sys.exit(1)
        
    except Exception as e:
        print(f"‚ùå Erro inesperado: {type(e).__name__} - {e}")
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    start_bot()
